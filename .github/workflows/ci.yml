name: ci

on:
  push:
    branches:
      - main
  pull_request:
  
env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.81.0

jobs:
  build:
    runs-on: ubuntu-latest-4-cores
    needs: [fmt, cairofmt]
    container:
      image: ghcr.io/dojoengine/dojo-dev:b37b325
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: |
          cargo build -r --bin katana
          cargo build -r --bin sozo
          mkdir -p bins
          cp ./target/release/katana bins/
          cp ./target/release/sozo bins/
      - uses: actions/upload-artifact@v4
        with:
          name: dojo-bins
          path: bins

  dojo-tests:
    needs: build
    runs-on: arc-runner-set
    env:
      KATANA_ADDR: "127.0.0.1"
      KATANA_PORT: "5050"
      KATANA_NO_MINING_PORT: "5051"
      KATANA_NO_FEE_PORT: "5052"
      KATANA_NO_ACCOUNT_VALIDATION_PORT: "5053"
      KATANA_OPENRPC_PORT: "5054"
      PAYMASTER_PRIVATE_KEY: "0xc5b2fcab997346f3ea1c00b002ecf6f382c5f9c9659a3894eb783c5320f912"
      PAYMASTER_ACCOUNT_ADDRESS: "0x127fd5f1fe78a71f8bcd1fec63e3fe2f0486b6ecd5c86a0466c3a21fa5cfcec"
      UDC_ADDRESS: "0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf"
      ACCOUNT_CLASS_HASH: "0x07dc7899aa655b0aae51eadff6d801a58e97dd99cf4666ee59e704249e51adf2"
      SCARB_VERSION: "2.8.4"
    steps:
      - uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y build-essential libclang-dev git curl bash libssl-dev pkg-config

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Scarb
        run: |
          export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"
          curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | bash -s -- -v $SCARB_VERSION
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Download katana binary
        uses: actions/download-artifact@v4
        with:
          name: dojo-bins
          path: /tmp/bins

      - run: chmod +x /tmp/bins/katana

      - name: Start katana nodes
        run: |
          declare -A KATANA_CONFIG=(
            ["${KATANA_PORT}"]=""
            ["${KATANA_OPENRPC_PORT}"]=""
            ["${KATANA_NO_MINING_PORT}"]="--no-mining --dev"
            ["${KATANA_NO_FEE_PORT}"]="--dev --dev.no-fee"
            ["${KATANA_NO_ACCOUNT_VALIDATION_PORT}"]="--dev --dev.no-account-validation"
          )
      
          for PORT in "${!KATANA_CONFIG[@]}"; do
            /tmp/bins/katana \
            --http.port "${PORT}" \
            --http.addr "${KATANA_ADDR}" \
            --silent \
            ${KATANA_CONFIG[$PORT]} &
          done

      - name: Checkout katana-runner repository
        uses: actions/checkout@v3
        with:
          repository: neotheprogramist/starknet-rpc-tests
          path: katana-runner

      - name: Scarb build
        run: |
          scarb build
        working-directory: katana-runner

      - name: Build openrpc-testgen-runner
        run: |
          cargo build --release --features "openrpc katana katana_no_mining katana_no_fee katana_no_account_validation" -p openrpc-testgen -p openrpc-testgen-runner
        working-directory: katana-runner

      - name: Run Katana Suite
        run: |
          URLS="http://${KATANA_ADDR}:${KATANA_PORT}"
          target/release/openrpc-testgen-runner \
          --urls "${URLS}" \
          --paymaster-account-address "${PAYMASTER_ACCOUNT_ADDRESS}" \
          --paymaster-private-key "${PAYMASTER_PRIVATE_KEY}" \
          --udc-address "${UDC_ADDRESS}" \
          --account-class-hash "${ACCOUNT_CLASS_HASH}" \
          --suite katana
        working-directory: katana-runner

      - name: Run OpenRPC Suite
        run: |
          URLS="http://${KATANA_ADDR}:${KATANA_OPENRPC_PORT}"
          target/release/openrpc-testgen-runner \
          --urls "${URLS}" \
          --paymaster-account-address "${PAYMASTER_ACCOUNT_ADDRESS}" \
          --paymaster-private-key "${PAYMASTER_PRIVATE_KEY}" \
          --udc-address "${UDC_ADDRESS}" \
          --account-class-hash "${ACCOUNT_CLASS_HASH}" \
          --suite open-rpc
        working-directory: katana-runner

      - name: Run Katana No Mining Suite
        run: |
          URLS="http://${KATANA_ADDR}:${KATANA_NO_MINING_PORT}"
          target/release/openrpc-testgen-runner \
          --urls "${URLS}" \
          --paymaster-account-address "${PAYMASTER_ACCOUNT_ADDRESS}" \
          --paymaster-private-key "${PAYMASTER_PRIVATE_KEY}" \
          --udc-address "${UDC_ADDRESS}" \
          --account-class-hash "${ACCOUNT_CLASS_HASH}" \
          --suite katana-no-mining
        working-directory: katana-runner

      - name: Run Katana No Fee Suite
        run: |
          URLS="http://${KATANA_ADDR}:${KATANA_NO_FEE_PORT}"
          target/release/openrpc-testgen-runner \
          --urls "${URLS}" \
          --paymaster-account-address "${PAYMASTER_ACCOUNT_ADDRESS}" \
          --paymaster-private-key "${PAYMASTER_PRIVATE_KEY}" \
          --udc-address "${UDC_ADDRESS}" \
          --account-class-hash "${ACCOUNT_CLASS_HASH}" \
          --suite katana-no-fee
        working-directory: katana-runner

      - name: Run Katana No Account Validation Suite
        run: |
          URLS="http://${KATANA_ADDR}:${KATANA_NO_ACCOUNT_VALIDATION_PORT}"
          target/release/openrpc-testgen-runner \
          --urls "${URLS}" \
          --paymaster-account-address "${PAYMASTER_ACCOUNT_ADDRESS}" \
          --paymaster-private-key "${PAYMASTER_PRIVATE_KEY}" \
          --udc-address "${UDC_ADDRESS}" \
          --account-class-hash "${ACCOUNT_CLASS_HASH}" \
          --suite katana-no-account-validation
        working-directory: katana-runner


  test:
    needs: ensure-docker
    runs-on: ubuntu-latest-32-cores
    container:
      image: ghcr.io/dojoengine/dojo-dev:b37b325
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions/download-artifact@v4
        with:
          name: dojo-bins
          path: /tmp/bins
      - run: |
          export PATH=/tmp/bins:$PATH
          chmod +x /tmp/bins/katana
          chmod +x /tmp/bins/sozo
          bash scripts/build_cairo_projects.sh /tmp/bins/sozo
          tar -xzf spawn-and-move-db.tar.gz -C /tmp/
          tar -xzf types-test-db.tar.gz -C /tmp/
          cargo llvm-cov nextest --no-report --all-features --workspace --build-jobs 20
          cargo llvm-cov report --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  ensure-wasm:
    runs-on: ubuntu-latest
    needs: [fmt, cairofmt]
    container:
      image: ghcr.io/dojoengine/dojo-dev:b37b325
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Install wasm32 target
        run: rustup target add wasm32-unknown-unknown
      - run: cargo build -r --target wasm32-unknown-unknown -p torii-client

  ensure-windows:
    needs: ensure-docker
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_version }}
          target: x86_64-pc-windows-msvc
      - uses: swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.github_token }}
      # required for `aws-lc-rs` crate to compile on Windows; https://aws.github.io/aws-lc-rs/requirements/windows.html
      - name: Install NASM
        uses: ilammy/setup-nasm@v1
        with:
          version: "2.15.05"
      - run: cargo build --target x86_64-pc-windows-msvc --bins

  # This job is used to ensure the built katana image doesn't depend on any
  # libraries that don't exist in the base docker image we use for distribution
  ensure-docker:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ubuntu:noble
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dojo-bins
      - run: |
          chmod +x ./katana
          ./katana &
          KATANA_PID=$!
          sleep 2
          if ! kill -0 $KATANA_PID; then
            echo "Katana exited with an error"
            exit 1
          fi
          kill $KATANA_PID

  cairofmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.9.2"
      - run: |
          scarb --manifest-path examples/spawn-and-move/Scarb.toml fmt --check
          scarb --manifest-path examples/simple/Scarb.toml fmt --check
          scarb --manifest-path crates/dojo/core/Scarb.toml fmt --check
          scarb --manifest-path crates/dojo/core-cairo-test/Scarb.toml fmt --check

  dojo-core-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.9.2"
      - uses: actions/download-artifact@v4
        with:
          name: dojo-bins
          path: /tmp/bins
      - uses: actions/checkout@v3
      - run: |
          chmod +x /tmp/bins/sozo
          /tmp/bins/sozo --manifest-path crates/dojo/core/Scarb.toml test
          /tmp/bins/sozo --manifest-path crates/dojo/core-cairo-test/Scarb.toml test

  dojo-examples-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.9.2"
      - uses: actions/download-artifact@v4
        with:
          name: dojo-bins
          path: /tmp/bins
      - uses: actions/checkout@v3
      - run: |
          chmod +x /tmp/bins/sozo
          /tmp/bins/sozo --manifest-path examples/spawn-and-move/Scarb.toml build
          /tmp/bins/sozo --manifest-path examples/spawn-and-move/Scarb.toml inspect ns-Flatbow
          /tmp/bins/sozo --manifest-path examples/spawn-and-move/Scarb.toml inspect ns-RiverSkale
          /tmp/bins/sozo --manifest-path examples/spawn-and-move/Scarb.toml test
          /tmp/bins/sozo --manifest-path examples/simple/Scarb.toml test

  clippy:
    runs-on: ubuntu-latest-4-cores
    needs: [fmt, cairofmt]
    container:
      image: ghcr.io/dojoengine/dojo-dev:b37b325
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: scripts/clippy.sh

  fmt:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:b37b325
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: scripts/rust_fmt.sh --check

  docs:
    runs-on: ubuntu-latest
    needs: [fmt, cairofmt]
    container:
      image: ghcr.io/dojoengine/dojo-dev:b37b325
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: >
          scripts/docs.sh

  test-hurl:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dojo-bins
          path: /tmp/bins
      - uses: actions/checkout@v3
      - run: |
          curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/3.0.0/hurl_3.0.0_amd64.deb
          sudo apt update && sudo apt install ./hurl_3.0.0_amd64.deb
          chmod +x /tmp/bins/katana
          chmod +x /tmp/bins/sozo
          nohup /tmp/bins/katana --dev --dev.accounts 2 --dev.no-fee &
      - run: |
          /tmp/bins/sozo --manifest-path examples/spawn-and-move/Scarb.toml build
          /tmp/bins/sozo --manifest-path examples/spawn-and-move/Scarb.toml migrate
      - run: hurl --test examples/rpc/**/*.hurl
